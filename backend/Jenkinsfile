pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'node20'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        DOCKERHUB_CREDENTIALS = credentials('dockerhub')
        DOCKER_IMAGE = 'dahunsij/ejobs_backend'
        DOCKER_NETWORK = 'ejobs_network'
        CONTAINER_NAME = 'ejobs_backend'
    }
    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Clone Repository') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'GIT_PAT', usernameVariable: 'GITHUB_USER', passwordVariable: 'GITHUB_PASS')]) {
                        sh 'git clone https://${GITHUB_USER}:${GITHUB_PASS}@github.com/Essentialng/ejobs.git'
                        sh 'cd ejobs && git checkout main'
                    }
                }
            }
        }
        stage('Read and Increment Version') {
            steps {
                script {
                    def version = readFile('ejobs/backend/version.txt').trim()
                    def parts = version.tokenize('.')
                    parts[2] = (parts[2].toInteger() + 1).toString()
                    def newVersion = parts.join('.')
                    writeFile(file: 'ejobs/backend/version.txt', text: newVersion)
                    sh 'cd ejobs && git add backend/version.txt && git commit -m "Update version to ${newVersion}" && git push'
                    env.BUILD_VERSION = newVersion
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                dir('ejobs/backend') {
                    withSonarQubeEnv('SonarQube-Servers') {
                        sh '''
                        echo "Running SonarQube Scanner..."
                        $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=ejobs_backend-CICD \
                        -Dsonar.projectKey=ejobs_backend-CICD \
                        -X
                        '''
                    }
                }
            }
        }
        stage('Quality Gate') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'SonarQube-Token'
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                dir('ejobs/backend') {
                    sh "npm install"
                }
            }
        }
        stage('TRIVY FS Scan') {
            steps {
                dir('ejobs/backend') {
                    sh "trivy fs . > trivyfs.txt"
                }
            }
        }
        stage('Docker Build & Push') {
            steps {
                dir('ejobs/backend') {
                    script {
                        withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                            docker.withRegistry('https://index.docker.io/v1/', 'dockerhub') {
                               
                                // Enable BuildKit by not setting DOCKER_BUILDKIT=0
                                sh "docker build -t dahunsij/ejobs_backend:latest -f Dockerfile ."

                                
                                // Tag the image with a version (you can update the versioning logic as needed)
                                sh "docker tag dahunsij/ejobs_backend:latest dahunsij/ejobs_backend:${env.BUILD_VERSION}.RELEASE"
                                
                                // Push the images to Docker Hub
                                sh "docker push dahunsij/ejobs_backend:${env.BUILD_VERSION}.RELEASE"


                                // Clean up old images with the name "ejobs_backend"
                                sh '''
                                docker images | grep dahunsij/ejobs_backend | grep -v ":${env.BUILD_VERSION}.RELEASE" | awk '{print $3}' | xargs docker rmi -f || true
                                '''

                                // Stop and remove any existing container with the same name
                                sh "docker stop ejobs_backend || true"
                                sh "docker rm ejobs_backend || true"

                                // // Run the container
                                sh "docker run -d -p 3003:3003 --name ejobs_backend dahunsij/ejobs_backend:${env.BUILD_VERSION}.RELEASE"
                            }
                        }
                    }
                }
            }
        }
        stage('TRIVY Image Scan') {
            steps {
                sh "trivy image dahunsij/ejobs_backend:${env.BUILD_VERSION}.RELEASE > trivyimage.txt"
            }
        }
        
        // Create Docker network
        stage('Create Docker Network') {
            steps {
                script {
                    // Create a custom Docker network for the application
                    sh "docker network create ejobs_network || true" // Use `|| true` to avoid error if the network already exists
                }
            }
        }
        stage('Deploy to VM') {
            steps {
                sshagent(['vm-ssh-credentials']) {
                    sh '''
                    #!/bin/bash
                    BUILD_VER=${BUILD_VERSION}
                    echo "Deploying version: $BUILD_VER"
                    ssh DevSecOps_Admin@13.92.179.121 "docker pull dahunsij/ejobs_backend:$BUILD_VER.RELEASE && docker stop ejobs_backend || true && docker rm ejobs_backend || true && docker run -d -p 3003:3003 --name ejobs_backend --network ejobs_network --restart on-failure dahunsij/ejobs_backend:$BUILD_VER.RELEASE"
                    '''
                }
            }
        }
        // stage('Setup Nginx for Frontend and Backend') {
        //     steps {
        //         sshagent(['vm-ssh-credentials']) {
        //             sh '''
        //             ssh DevSecOps_Admin@13.92.179.121 '
        //                 # Update package lists and install Nginx & Certbot if not already installed
        //                 sudo apt-get update &&
        //                 sudo apt-get install -y nginx certbot python3-certbot-nginx &&

        //                 # Create or overwrite the server block for the domain
        //                 echo "
        //                 server {
        //                     listen 80;
        //                     listen [::]:80;
        //                     server_name ejobs.com.ng;

        //                     # Frontend configuration
        //                     location / {
        //                         proxy_pass http://localhost:3002;
        //                         proxy_set_header Host \$host;
        //                         proxy_set_header X-Real-IP \$remote_addr;
        //                         proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        //                         proxy_set_header X-Forwarded-Proto \$scheme;
        //                     }

        //                     # Backend configuration (served at /api)
        //                     location /api/ {
        //                         proxy_pass http://localhost:3003/;
        //                         proxy_set_header Host \$host;
        //                         proxy_set_header X-Real-IP \$remote_addr;
        //                         proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        //                         proxy_set_header X-Forwarded-Proto \$scheme;
        //                     }
        //                 }" | sudo tee /etc/nginx/sites-available/ejobs.com.ng &&

        //                 # Enable the site
        //                 sudo ln -sf /etc/nginx/sites-available/ejobs.com.ng /etc/nginx/sites-enabled/ejobs.com.ng &&

        //                 # Test Nginx configuration
        //                 sudo nginx -t &&

        //                 # Reload Nginx to apply changes
        //                 sudo systemctl reload nginx &&

        //                 # Obtain or renew SSL certificate for the domain
        //                 sudo certbot --nginx -d ejobs.com.ng --non-interactive --agree-tos -m your-email@example.com -n
        //             '
        //             '''
        //         }
        //     }
        // }

        // stage('Setup Nginx') {
        //     steps {
        //         sshagent(['vm-ssh-credentials']) {
        //             sh '''
        //             ssh -o StrictHostKeyChecking=no DevSecOps_Admin@13.92.179.121 '
        //                 # Update package lists and install Nginx
        //                 sudo apt-get update &&
        //                 sudo apt-get install -y nginx &&
                        
        //                 # Create the Nginx configuration for the application
        //                 echo "
        //                 server {
        //                     listen 80;
        //                     server_name ejobs.ooshinfo.com;

        //                     location / {
        //                         # Forward requests to the Docker container running on port 4000
        //                         proxy_pass http://13.92.179.121:3003;
        //                         proxy_set_header Host $host;
        //                         proxy_set_header X-Real-IP $remote_addr;
        //                         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        //                         proxy_set_header X-Forwarded-Proto $scheme;
        //                     }
        //                 }
        //                 " | sudo tee /etc/nginx/sites-available/ejobs &&
                        
        //                 # Enable the configuration by linking it to sites-enabled
        //                 sudo ln -sf /etc/nginx/sites-available/ejobs /etc/nginx/sites-enabled/ &&
                        
        //                 # Test the Nginx configuration for syntax errors
        //                 sudo nginx -t &&
                        
        //                 # Restart Nginx to apply the new configuration
        //                 sudo systemctl restart nginx
        //             '
        //             '''
        //         }
        //     }
        // }
        // Coming soon - Stages for monitoring and logging setup as needed
    }
}
