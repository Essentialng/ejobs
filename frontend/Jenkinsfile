pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'node20'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        DOCKERHUB_CREDENTIALS = credentials('dockerhub')
        DOCKER_IMAGE = 'dahunsij/ejobs_frontend'
        DOCKER_NETWORK = 'ejobs_network'
        CONTAINER_NAME = 'ejobs_frontend'
    }
    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Clone Repository') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'GIT_PAT', usernameVariable: 'GITHUB_USER', passwordVariable: 'GITHUB_PASS')]) {
                        sh 'git clone https://${GITHUB_USER}:${GITHUB_PASS}@github.com/Essentialng/ejobs.git'
                        sh 'cd ejobs && git checkout main'
                    }
                }
            }
        }
        stage('Read and Increment Version') {
            steps {
                script {
                    def version = readFile('ejobs/frontend/version.txt').trim()
                    def parts = version.tokenize('.')
                    parts[2] = (parts[2].toInteger() + 1).toString()
                    def newVersion = parts.join('.')
                    writeFile(file: 'ejobs/frontend/version.txt', text: newVersion)
                    sh 'cd ejobs && git add frontend/version.txt && git commit -m "Update version to ${newVersion}" && git push'
                    env.BUILD_VERSION = newVersion
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                dir('ejobs/frontend') {
                    withSonarQubeEnv('SonarQube-Servers') {
                        sh '''
                        $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=ejobs_frontend-CICD \
                        -Dsonar.projectKey=ejobs_frontend-CICD \
                        -X
                        '''
                    }
                }
            }
        }
        stage('Quality Gate') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'SonarQube-Token'
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                dir('ejobs/frontend') {
                    sh "npm install"
                }
            }
        }
        stage('TRIVY FS Scan') {
            steps {
                dir('ejobs/frontend') {
                    sh "trivy fs . > trivyfs.txt"
                }
            }
        }
        stage('Docker Build & Push') {
            steps {
                dir('ejobs/frontend') {
                    script {
                        docker.withRegistry('https://index.docker.io/v1/', 'dockerhub') {
                            sh "docker build -t dahunsij/ejobs_frontend:latest -f Dockerfile ."
                            sh "docker tag dahunsij/ejobs_frontend:latest dahunsij/ejobs_frontend:${env.BUILD_VERSION}.RELEASE"
                            sh "docker push dahunsij/ejobs_frontend:${env.BUILD_VERSION}.RELEASE"
                            // Clean up old images with the name "ejobs_frontend"
                            sh '''
                            docker images | grep dahunsij/ejobs_frontend | grep -v ":${env.BUILD_VERSION}.RELEASE" | awk '{print $3}' | xargs docker rmi -f || true
                            '''

                            // Stop and remove any existing container with the same name
                            sh "docker stop ejobs_frontend || true"
                            sh "docker rm ejobs_frontend || true"

                            // // Run the container
                            sh "docker run -d -p 3002:3002 --name ejobs_frontend dahunsij/ejobs_frontend:${env.BUILD_VERSION}.RELEASE"
                        }
                    }
                }
            }
        }
        stage('TRIVY Image Scan') {
            steps {
                sh "trivy image dahunsij/ejobs_frontend:${env.BUILD_VERSION}.RELEASE > trivyimage.txt"
            }
        }
        stage('Deploy to VM') {
            steps {
                sshagent(['vm-ssh-credentials']) {
                    sh '''
                    ssh DevSecOps_Admin@13.92.179.121 "docker pull dahunsij/ejobs_frontend:${BUILD_VERSION}.RELEASE && docker stop ${CONTAINER_NAME} || true && docker rm ${CONTAINER_NAME} || true && docker run -d -p 3002:3002 --name ${CONTAINER_NAME} dahunsij/ejobs_frontend:${BUILD_VERSION}.RELEASE"
                    '''
                }
            }
        }
        stage('Setup Nginx') {
            steps {
                sshagent(['vm-ssh-credentials']) {
                    sh '''
                    ssh DevSecOps_Admin@13.92.179.121 '
                        sudo apt-get update &&
                        sudo apt-get install -y nginx &&
                        echo "
                        server {
                            listen 80;
                            server_name https://ejobs.ooshinfo.com;
                            location / {
                                proxy_pass http://13.92.179.121:3002;
                            }
                        }" | sudo tee /etc/nginx/sites-available/ejobs &&
                        sudo ln -sf /etc/nginx/sites-available/ejobs /etc/nginx/sites-enabled/ &&
                        sudo nginx -t &&
                        sudo systemctl restart nginx
                    '
                    '''
                }
            }
        }
    }
}